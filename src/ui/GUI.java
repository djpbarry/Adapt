/* 
 * Copyright (C) 2014 David Barry <david.barry at cancer.org.uk>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package ui;

import Adapt.Analyse_Movie;
import Adapt.StaticVariables;
import Adapt.TaskListener;
import Adapt.UserVariables;
import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.gui.ImageCanvas;
import ij.gui.PointRoi;
import ij.process.AutoThresholder;
import ij.process.ByteProcessor;
import ij.process.ColorProcessor;
import ij.process.ImageProcessor;
import ij.process.TypeConverter;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JToggleButton;

/**
 *
 * @author barry05
 */
public class GUI extends javax.swing.JDialog {

    private ImagePlus cytoImp, sigImp;
    private ImageProcessor cytoProc, sigProc;
    private ImageStack[] stacks;
    private String title;
    private boolean wasOKed = false;
    private final int MAX_DIM = 512;
    private static UserVariables uv = new UserVariables();
    ArrayList<Thread> previewThreads = new ArrayList();
    private PointRoi roi;

    /**
     * Creates new form GUI
     */
    public GUI(java.awt.Frame parent, boolean modal, String title, ImageStack[] stacks, PointRoi roi) {
        super(parent, modal);
        this.stacks = stacks;
        this.title = title;
        cytoProc = stacks[0].getProcessor(1).duplicate();
        cytoProc = checkImageDimensions(cytoProc);
        cytoImp = new ImagePlus("", cytoProc);
        this.roi = roi;
        if (stacks[1] != null) {
            sigProc = stacks[1].getProcessor(1).duplicate();
            sigProc = checkImageDimensions(sigProc);
            sigImp = new ImagePlus("", sigProc);
        } else {
            sigImp = new ImagePlus("", new ByteProcessor(cytoProc.getWidth(), cytoProc.getHeight()));
        }
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getWidth() / 2, dim.height / 2 - this.getHeight() / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        simpleTab = new javax.swing.JPanel();
        greyThreshLabel = new javax.swing.JLabel();
        greyThreshField = new javax.swing.JTextField();
        spatResLabel = new javax.swing.JLabel();
        spatResField = new javax.swing.JTextField();
        timeResLabel = new javax.swing.JLabel();
        timeResField = new javax.swing.JTextField();
        autoThreshToggleButton = new javax.swing.JToggleButton();
        genVisToggleButton = new javax.swing.JToggleButton();
        genMorphToggleButton = new javax.swing.JToggleButton();
        minTrajLabel = new javax.swing.JLabel();
        minTrajTextField = new javax.swing.JTextField();
        genSigDistToggleButton = new javax.swing.JToggleButton();
        minMorphAreaLabel = new javax.swing.JLabel();
        minMorphAreaTextField = new javax.swing.JTextField();
        advancedTab = new javax.swing.JPanel();
        erosionField = new javax.swing.JTextField();
        erosionLabel = new javax.swing.JLabel();
        spatFiltRadLabel = new javax.swing.JLabel();
        spatFiltRadField = new javax.swing.JTextField();
        tempFiltRadLabel = new javax.swing.JLabel();
        tempFiltRadField = new javax.swing.JTextField();
        simpSegRadioButton = new javax.swing.JRadioButton();
        advSegRadioButton = new javax.swing.JRadioButton();
        lambdaLabel = new javax.swing.JLabel();
        lambdaTextField = new javax.swing.JTextField();
        threshComboBox = new javax.swing.JComboBox();
        threshLabel = new javax.swing.JLabel();
        gaussRadField = new javax.swing.JTextField();
        gaussRadLabel = new javax.swing.JLabel();
        cortexDepthField = new javax.swing.JTextField();
        cortexDepthLabel = new javax.swing.JLabel();
        visLineWidthLabel = new javax.swing.JLabel();
        visLineWidthTextField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        minCurveRangeLabel = new javax.swing.JLabel();
        minCurveRangeField = new javax.swing.JTextField();
        minCurveThreshLabel = new javax.swing.JLabel();
        minCurveThreshField = new javax.swing.JTextField();
        cutOffLabel = new javax.swing.JLabel();
        cutOffField = new javax.swing.JTextField();
        sigThreshFactLabel = new javax.swing.JLabel();
        sigThreshFactField = new javax.swing.JTextField();
        sigRecThreshLabel = new javax.swing.JLabel();
        sigRecThreshField = new javax.swing.JTextField();
        anaProtToggleButton = new javax.swing.JToggleButton();
        useSigThreshToggleButton = new javax.swing.JToggleButton();
        blebDetectRadioButton = new javax.swing.JRadioButton();
        filoDetectRadioButton = new javax.swing.JRadioButton();
        protLenLabel = new javax.swing.JLabel();
        protDurLabel = new javax.swing.JLabel();
        protLenField = new javax.swing.JTextField();
        protDurField = new javax.swing.JTextField();
        filoSizeLabel = new javax.swing.JLabel();
        filoSizeField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        cytoCanvas = new ImageCanvas(cytoImp);
        previewToggleButton = new javax.swing.JToggleButton();
        previewField = new javax.swing.JTextField();
        cytoLabel = new javax.swing.JLabel();
        sigCanvas = new ImageCanvas(sigImp);
        sigLabel = new javax.swing.JLabel();
        previewScrollBar = new javax.swing.JScrollBar();
        jPanel5 = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(title);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        simpleTab.setLayout(new java.awt.GridBagLayout());

        greyThreshLabel.setText(StaticVariables.GREY_SENS);
        greyThreshLabel.setEnabled(!uv.isAutoThreshold());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        simpleTab.add(greyThreshLabel, gridBagConstraints);

        greyThreshField.setText(String.valueOf(uv.getGreyThresh()));
        greyThreshField.setEnabled(!uv.isAutoThreshold());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        simpleTab.add(greyThreshField, gridBagConstraints);

        spatResLabel.setText(StaticVariables.SPAT_RES);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        simpleTab.add(spatResLabel, gridBagConstraints);

        spatResField.setText(String.valueOf(uv.getSpatialRes()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        simpleTab.add(spatResField, gridBagConstraints);

        timeResLabel.setText(StaticVariables.TIME_RES);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        simpleTab.add(timeResLabel, gridBagConstraints);

        timeResField.setText(String.valueOf(uv.getTimeRes()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        simpleTab.add(timeResField, gridBagConstraints);

        autoThreshToggleButton.setText(StaticVariables.AUTO_THRESH);
        autoThreshToggleButton.setSelected(uv.isAutoThreshold());
        autoThreshToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoThreshToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        simpleTab.add(autoThreshToggleButton, gridBagConstraints);

        genVisToggleButton.setText(StaticVariables.GEN_VIS);
        genVisToggleButton.setSelected(uv.isGenVis());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        simpleTab.add(genVisToggleButton, gridBagConstraints);

        genMorphToggleButton.setText(StaticVariables.GET_MORPH);
        genMorphToggleButton.setSelected(uv.isGetMorph());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        simpleTab.add(genMorphToggleButton, gridBagConstraints);

        minTrajLabel.setText(StaticVariables.MIN_TRAJ_LENGTH);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        simpleTab.add(minTrajLabel, gridBagConstraints);

        minTrajTextField.setText(String.valueOf(uv.getMinLength()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        simpleTab.add(minTrajTextField, gridBagConstraints);

        genSigDistToggleButton.setText(StaticVariables.GEN_SIG_DIST);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        simpleTab.add(genSigDistToggleButton, gridBagConstraints);

        minMorphAreaLabel.setText(StaticVariables.MIN_MORPH_AREA);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        simpleTab.add(minMorphAreaLabel, gridBagConstraints);

        minMorphAreaTextField.setText(String.valueOf(uv.getMorphSizeMin()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        simpleTab.add(minMorphAreaTextField, gridBagConstraints);

        jTabbedPane1.addTab("Simple", simpleTab);

        advancedTab.setLayout(new java.awt.GridBagLayout());

        erosionField.setText(String.valueOf(uv.getErosion()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        advancedTab.add(erosionField, gridBagConstraints);

        erosionLabel.setText(StaticVariables.EROSION);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedTab.add(erosionLabel, gridBagConstraints);

        spatFiltRadLabel.setText(StaticVariables.SPAT_FILT_RAD);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedTab.add(spatFiltRadLabel, gridBagConstraints);

        spatFiltRadField.setText(String.valueOf(uv.getSpatFiltRad()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        advancedTab.add(spatFiltRadField, gridBagConstraints);

        tempFiltRadLabel.setText(StaticVariables.TEMP_FILT_RAD);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedTab.add(tempFiltRadLabel, gridBagConstraints);

        tempFiltRadField.setText(String.valueOf(uv.getTempFiltRad()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        advancedTab.add(tempFiltRadField, gridBagConstraints);

        simpSegRadioButton.setText(StaticVariables.SIMP_SEG);
        simpSegRadioButton.setSelected(uv.isSimple());
        simpSegRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpSegRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        advancedTab.add(simpSegRadioButton, gridBagConstraints);

        advSegRadioButton.setText(StaticVariables.ADV_SEG);
        advSegRadioButton.setSelected(!uv.isSimple());
        advSegRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advSegRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        advancedTab.add(advSegRadioButton, gridBagConstraints);

        lambdaLabel.setText(StaticVariables.LAMBDA);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedTab.add(lambdaLabel, gridBagConstraints);

        lambdaTextField.setText(String.valueOf(uv.getLambda()));
        lambdaTextField.setEnabled(advSegRadioButton.isSelected());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        advancedTab.add(lambdaTextField, gridBagConstraints);

        threshComboBox.setModel(new DefaultComboBoxModel(AutoThresholder.Method.values()));
        threshComboBox.setSelectedItem(AutoThresholder.Method.valueOf(uv.getThreshMethod()));
        threshComboBox.setEnabled(uv.isAutoThreshold());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        advancedTab.add(threshComboBox, gridBagConstraints);

        threshLabel.setText(StaticVariables.THRESH_METHOD);
        threshLabel.setEnabled(uv.isAutoThreshold());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedTab.add(threshLabel, gridBagConstraints);

        gaussRadField.setText(String.valueOf(uv.getGaussRad()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        advancedTab.add(gaussRadField, gridBagConstraints);

        gaussRadLabel.setText(StaticVariables.GAUSS_RAD);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedTab.add(gaussRadLabel, gridBagConstraints);

        cortexDepthField.setText(String.valueOf(uv.getCortexDepth()));
        cortexDepthField.setEnabled(stacks[1]!=null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        advancedTab.add(cortexDepthField, gridBagConstraints);

        cortexDepthLabel.setText(StaticVariables.CORTEX_DEPTH);
        cortexDepthLabel.setEnabled(stacks[1]!=null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedTab.add(cortexDepthLabel, gridBagConstraints);

        visLineWidthLabel.setText(StaticVariables.VIS_LINE_WIDTH);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedTab.add(visLineWidthLabel, gridBagConstraints);

        visLineWidthTextField.setText(String.valueOf(uv.getVisLineWidth()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        advancedTab.add(visLineWidthTextField, gridBagConstraints);

        jTabbedPane1.addTab("Advanced", advancedTab);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        minCurveRangeLabel.setText(StaticVariables.MIN_CURVE_RANGE);
        minCurveRangeLabel.setEnabled(uv.isAnalyseProtrusions() && uv.isBlebDetect());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(minCurveRangeLabel, gridBagConstraints);

        minCurveRangeField.setText(String.valueOf(uv.getCurveRange()));
        minCurveRangeField.setEnabled(uv.isAnalyseProtrusions() && uv.isBlebDetect());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(minCurveRangeField, gridBagConstraints);

        minCurveThreshLabel.setText(StaticVariables.MIN_CURVE_THRESH);
        minCurveThreshLabel.setEnabled(uv.isAnalyseProtrusions() && uv.isBlebDetect());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(minCurveThreshLabel, gridBagConstraints);

        minCurveThreshField.setText(String.valueOf(uv.getMinCurveThresh()));
        minCurveThreshField.setEnabled(uv.isAnalyseProtrusions() && uv.isBlebDetect());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(minCurveThreshField, gridBagConstraints);

        cutOffLabel.setText(StaticVariables.CUT_OFF);
        cutOffLabel.setEnabled(uv.isAnalyseProtrusions());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel4.add(cutOffLabel, gridBagConstraints);

        cutOffField.setText(String.valueOf(uv.getCutOffTime()));
        cutOffField.setEnabled(uv.isAnalyseProtrusions());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel4.add(cutOffField, gridBagConstraints);

        sigThreshFactLabel.setText(StaticVariables.SIG_THRESH_FACT);
        sigThreshFactLabel.setEnabled(uv.isAnalyseProtrusions() && uv.isUseSigThresh());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(sigThreshFactLabel, gridBagConstraints);

        sigThreshFactField.setText(String.valueOf(uv.getSigThreshFact()));
        sigThreshFactField.setEnabled(uv.isAnalyseProtrusions() && uv.isUseSigThresh());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(sigThreshFactField, gridBagConstraints);

        sigRecThreshLabel.setText(StaticVariables.SIG_REC_THRESH);
        sigRecThreshLabel.setEnabled(uv.isAnalyseProtrusions() && uv.isUseSigThresh());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(sigRecThreshLabel, gridBagConstraints);

        sigRecThreshField.setText(String.valueOf(uv.getSigRecoveryThresh()));
        sigRecThreshField.setEnabled(uv.isAnalyseProtrusions() && uv.isUseSigThresh());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(sigRecThreshField, gridBagConstraints);

        anaProtToggleButton.setText(StaticVariables.ANA_PROT);
        anaProtToggleButton.setSelected(uv.isAnalyseProtrusions());
        anaProtToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anaProtToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(anaProtToggleButton, gridBagConstraints);

        useSigThreshToggleButton.setText(StaticVariables.USE_SIG_THRESH);
        useSigThreshToggleButton.setSelected(uv.isUseSigThresh());
        useSigThreshToggleButton.setEnabled(uv.isAnalyseProtrusions());
        useSigThreshToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useSigThreshToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(useSigThreshToggleButton, gridBagConstraints);

        blebDetectRadioButton.setText(StaticVariables.DETECT_BLEB);
        blebDetectRadioButton.setSelected(uv.isBlebDetect());
        blebDetectRadioButton.setEnabled(uv.isAnalyseProtrusions());
        blebDetectRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blebDetectRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel4.add(blebDetectRadioButton, gridBagConstraints);

        filoDetectRadioButton.setText(StaticVariables.DETECT_FILO);
        filoDetectRadioButton.setSelected(!uv.isBlebDetect());
        filoDetectRadioButton.setEnabled(uv.isAnalyseProtrusions());
        filoDetectRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filoDetectRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        jPanel4.add(filoDetectRadioButton, gridBagConstraints);

        protLenLabel.setText(StaticVariables.PROT_LEN_THRESH);
        protLenLabel.setEnabled(uv.isAnalyseProtrusions());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(protLenLabel, gridBagConstraints);

        protDurLabel.setText(StaticVariables.PROT_DUR_THRESH);
        protDurLabel.setEnabled(uv.isAnalyseProtrusions());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(protDurLabel, gridBagConstraints);

        protLenField.setText(String.valueOf(uv.getBlebLenThresh()));
        protLenField.setEnabled(uv.isAnalyseProtrusions());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(protLenField, gridBagConstraints);

        protDurField.setText(String.valueOf(uv.getBlebDurThresh()));
        protDurField.setEnabled(uv.isAnalyseProtrusions());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(protDurField, gridBagConstraints);

        filoSizeLabel.setText(StaticVariables.FILO_SIZE);
        filoSizeLabel.setEnabled(uv.isAnalyseProtrusions() && !uv.isBlebDetect());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel4.add(filoSizeLabel, gridBagConstraints);

        filoSizeField.setText(String.valueOf(uv.getFiloSize()));
        filoSizeField.setEnabled(uv.isAnalyseProtrusions() && !uv.isBlebDetect());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        jPanel4.add(filoSizeField, gridBagConstraints);

        jTabbedPane1.addTab("Protrusion Analysis", jPanel4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jTabbedPane1, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        cytoCanvas.setPreferredSize(new java.awt.Dimension(256, 256));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(cytoCanvas, gridBagConstraints);

        previewToggleButton.setText("Preview");
        previewToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(previewToggleButton, gridBagConstraints);

        previewField.setText(String.valueOf(previewScrollBar.getValue()));
        previewField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(previewField, gridBagConstraints);

        cytoLabel.setText("Cyto Channel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(cytoLabel, gridBagConstraints);

        sigCanvas.setPreferredSize(new java.awt.Dimension(250, 250));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(sigCanvas, gridBagConstraints);

        sigLabel.setText("Sig Channel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(sigLabel, gridBagConstraints);

        previewScrollBar.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        previewScrollBar.setModel(new DefaultBoundedRangeModel(1, 0, 1, stacks[0].getSize()));
        previewScrollBar.setEnabled(previewToggleButton.isSelected());
        previewScrollBar.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                previewScrollBarAdjustmentValueChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.8;
        jPanel3.add(previewScrollBar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel5.add(runButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel5.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jPanel5, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
        wasOKed = false;
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if (!setVariables()) {
            return;
        }
        this.dispose();
        wasOKed = true;
    }//GEN-LAST:event_runButtonActionPerformed

    private void autoThreshToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoThreshToggleButtonActionPerformed
        disableComponentOnSelect(greyThreshLabel, greyThreshField, autoThreshToggleButton);
        enableComponentOnSelect(threshLabel, threshComboBox, autoThreshToggleButton);
    }//GEN-LAST:event_autoThreshToggleButtonActionPerformed

    private void previewToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewToggleButtonActionPerformed
        previewScrollBar.setEnabled(previewToggleButton.isSelected());
        enableComponentOnSelect(null, previewField, previewToggleButton);
        previewScrollBarAdjustmentValueChanged(null);
    }//GEN-LAST:event_previewToggleButtonActionPerformed

    private void anaProtToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anaProtToggleButtonActionPerformed
        enableComponentOnSelect(minCurveRangeLabel, minCurveRangeField, anaProtToggleButton);
        enableComponentOnSelect(minCurveThreshLabel, minCurveThreshField, anaProtToggleButton);
//        enableComponentOnSelect(maxCurveThreshLabel, maxCurveThreshField, anaProtToggleButton);
        enableComponentOnSelect(cutOffLabel, cutOffField, anaProtToggleButton);
        enableComponentOnSelect(protLenLabel, protLenField, anaProtToggleButton);
        enableComponentOnSelect(protDurLabel, protDurField, anaProtToggleButton);
        enableComponentOnSelect(sigThreshFactLabel, sigThreshFactField, anaProtToggleButton);
        enableComponentOnSelect(sigRecThreshLabel, sigRecThreshField, anaProtToggleButton);
        enableComponentOnSelect(filoSizeLabel, filoSizeField, anaProtToggleButton);
        useSigThreshToggleButton.setEnabled(anaProtToggleButton.isSelected());
        blebDetectRadioButton.setEnabled(anaProtToggleButton.isSelected());
        filoDetectRadioButton.setEnabled(anaProtToggleButton.isSelected());
        useSigThreshToggleButtonActionPerformed(null);
        blebDetectRadioButtonActionPerformed(null);
    }//GEN-LAST:event_anaProtToggleButtonActionPerformed

    private void useSigThreshToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useSigThreshToggleButtonActionPerformed
        enableComponentOnSelect(sigThreshFactLabel, sigThreshFactField, useSigThreshToggleButton);
        enableComponentOnSelect(sigRecThreshLabel, sigRecThreshField, useSigThreshToggleButton);
    }//GEN-LAST:event_useSigThreshToggleButtonActionPerformed

    private void previewScrollBarAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_previewScrollBarAdjustmentValueChanged
        if (previewScrollBar.getValueIsAdjusting() || !setVariables()) {
            return;
        }
        for (int i = 0; i < previewThreads.size(); i++) {
            Thread currentThread = previewThreads.get(i);
//            try {
            currentThread.interrupt();
//                currentThread.join();
//            } catch (InterruptedException e) {
//                IJ.error("Failed to generate preview.");
//                return;
//            }
        }
        previewThreads = new ArrayList();
        previewField.setText(String.valueOf(previewScrollBar.getValue()));
        final Analyse_Movie previewAnalyser = new Analyse_Movie(stacks, false, false, uv, null, roi);
        previewAnalyser.preparePreview(previewScrollBar.getValue(), (UserVariables) uv.clone());
        previewAnalyser.addListener(new TaskListener() {
            public void threadComplete(Runnable runner) {
                if (!Thread.interrupted()) {
                    generatePreviewComplete((Analyse_Movie) runner);
                }
            }
        });
        Thread previewThread = new Thread(previewAnalyser);
        previewThread.start();
        previewThreads.add(previewThread);
    }//GEN-LAST:event_previewScrollBarAdjustmentValueChanged

    private void generatePreviewComplete(Analyse_Movie analyser) {
        ImageProcessor updates[] = analyser.getPreviewImages();
        ImageProcessor cytoUpdate = checkImageDimensions(updates[0]);
        cytoImp.setProcessor(cytoUpdate);
        cytoCanvas.repaint();
        if (stacks[1] != null) {
            ImageProcessor sigUpdate = checkImageDimensions(updates[1]);
            sigImp.setProcessor(sigUpdate);
            sigCanvas.repaint();
        }
    }

    private void simpSegRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpSegRadioButtonActionPerformed
        advSegRadioButton.setSelected(!simpSegRadioButton.isSelected());
        updateLambdaTextField();
    }//GEN-LAST:event_simpSegRadioButtonActionPerformed

    private void advSegRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advSegRadioButtonActionPerformed
        simpSegRadioButton.setSelected(!advSegRadioButton.isSelected());
        updateLambdaTextField();
    }//GEN-LAST:event_advSegRadioButtonActionPerformed

    private void blebDetectRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blebDetectRadioButtonActionPerformed
        filoDetectRadioButton.setSelected(!blebDetectRadioButton.isSelected());
        enableComponentOnSelect(minCurveRangeLabel, minCurveRangeField, blebDetectRadioButton);
        enableComponentOnSelect(minCurveThreshLabel, minCurveThreshField, blebDetectRadioButton);
//        enableComponentOnSelect(maxCurveThreshLabel, maxCurveThreshField, blebDetectRadioButton);
        enableComponentOnSelect(filoSizeLabel, filoSizeField, filoDetectRadioButton);
    }//GEN-LAST:event_blebDetectRadioButtonActionPerformed

    private void filoDetectRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filoDetectRadioButtonActionPerformed
        blebDetectRadioButton.setSelected(!filoDetectRadioButton.isSelected());
        blebDetectRadioButtonActionPerformed(evt);
    }//GEN-LAST:event_filoDetectRadioButtonActionPerformed

    private void updateLambdaTextField() {
        lambdaTextField.setEnabled(advSegRadioButton.isSelected());
    }

    private void disableComponentOnSelect(JComponent c1, JComponent c2, JToggleButton button) {
        c2.setEnabled(!(button.isSelected() && button.isEnabled()));
        if (c1 != null) {
            c1.setEnabled(!(button.isSelected() && button.isEnabled()));
        }
    }

    private void enableComponentOnSelect(JComponent c1, JComponent c2, JToggleButton button) {
        c2.setEnabled(button.isSelected() && button.isEnabled());
        if (c1 != null) {
            c1.setEnabled(button.isSelected() && button.isEnabled());
        }
    }

    boolean setVariables() {
        try {
            uv.setGreyThresh(Double.parseDouble(greyThreshField.getText()));
            uv.setGenVis(genVisToggleButton.isSelected());
            uv.setCurveRange(Integer.parseInt(minCurveRangeField.getText()));
//            uv.setMaxCurveRange(Integer.parseInt(maxCurveRangeField.getText()));
            uv.setUseSigThresh(useSigThreshToggleButton.isSelected());
            uv.setSpatialRes(Double.parseDouble(spatResField.getText()));
            uv.setCutOffTime(Double.parseDouble(cutOffField.getText()));
            uv.setCortexDepth(Double.parseDouble(cortexDepthField.getText()));
            uv.setAutoThreshold(autoThreshToggleButton.isSelected());
            uv.setTempFiltRad(Double.parseDouble(tempFiltRadField.getText()));
            uv.setSigThreshFact(Double.parseDouble(sigThreshFactField.getText()));
            uv.setSpatFiltRad(Double.parseDouble(spatFiltRadField.getText()));
            uv.setErosion(Integer.parseInt(erosionField.getText()));
            uv.setGetMorph(genMorphToggleButton.isSelected());
            uv.setTimeRes(Double.parseDouble(timeResField.getText()));
            uv.setMinCurveThresh(Double.parseDouble(minCurveThreshField.getText()));
//            uv.setMaxCurveThresh(Double.parseDouble(maxCurveThreshField.getText()));
            uv.setAnalyseProtrusions(anaProtToggleButton.isSelected());
            uv.setBlebDetect(blebDetectRadioButton.isSelected());
            uv.setSigRecoveryThresh(Double.parseDouble(sigRecThreshField.getText()));
            uv.setGaussRad(Double.parseDouble(gaussRadField.getText()));
            uv.setSimple(simpSegRadioButton.isSelected());
            uv.setLambda(Double.parseDouble(lambdaTextField.getText()));
            uv.setMinLength((int) Math.round(Double.parseDouble(minTrajTextField.getText())));
            uv.setThreshMethod(String.valueOf(threshComboBox.getSelectedItem()));
            uv.setBlebDurThresh(Double.parseDouble(protDurField.getText()));
            uv.setBlebLenThresh(Double.parseDouble(protLenField.getText()));
            uv.setFiloSize(Double.parseDouble(filoSizeField.getText()));
            uv.setGetFluorDist(genSigDistToggleButton.isSelected());
            uv.setMorphSizeMin(Double.parseDouble(minMorphAreaTextField.getText()));
            uv.setVisLineWidth(Integer.parseInt(visLineWidthTextField.getText()));
        } catch (NumberFormatException e) {
            IJ.error("Number formatting error " + e.toString());
            return false;
        }
        return true;
    }

    public static UserVariables getUv() {
        return uv;
    }

    public boolean isWasOKed() {
        return wasOKed;
    }

    private ImageProcessor checkImageDimensions(ImageProcessor inputImage) {
        ColorProcessor colorImage = (ColorProcessor) (new TypeConverter(inputImage, false)).convertToRGB();
        int width = inputImage.getWidth();
        int height = inputImage.getHeight();
        int pixsize = width * height;
        double widthscale = ((double) width) / MAX_DIM;
        double heightscale = ((double) height) / MAX_DIM;
        if (widthscale > 1.0 || heightscale > 1.0) {
            double scale = 1.0 / Math.max(widthscale, heightscale);
            int scaledwidth = (int) Math.round(scale * colorImage.getWidth());
            byte redPix[] = new byte[pixsize], greenPix[] = new byte[pixsize],
                    bluePix[] = new byte[pixsize];
            colorImage.getRGB(redPix, greenPix, bluePix);
            ImageProcessor red = (new ByteProcessor(width, height, redPix)).resize(scaledwidth);
            ImageProcessor green = (new ByteProcessor(width, height, greenPix)).resize(scaledwidth);
            ImageProcessor blue = (new ByteProcessor(width, height, bluePix)).resize(scaledwidth);
            ColorProcessor output = new ColorProcessor(red.getWidth(), red.getHeight());
            output.setRGB((byte[]) red.getPixels(), (byte[]) green.getPixels(), (byte[]) blue.getPixels());
            return output;
        } else {
            return colorImage;
        }
    }
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                GUI dialog = new GUI(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton advSegRadioButton;
    private javax.swing.JPanel advancedTab;
    private javax.swing.JToggleButton anaProtToggleButton;
    private javax.swing.JToggleButton autoThreshToggleButton;
    private javax.swing.JRadioButton blebDetectRadioButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField cortexDepthField;
    private javax.swing.JLabel cortexDepthLabel;
    private javax.swing.JTextField cutOffField;
    private javax.swing.JLabel cutOffLabel;
    private java.awt.Canvas cytoCanvas;
    private javax.swing.JLabel cytoLabel;
    private javax.swing.JTextField erosionField;
    private javax.swing.JLabel erosionLabel;
    private javax.swing.JRadioButton filoDetectRadioButton;
    private javax.swing.JTextField filoSizeField;
    private javax.swing.JLabel filoSizeLabel;
    private javax.swing.JTextField gaussRadField;
    private javax.swing.JLabel gaussRadLabel;
    private javax.swing.JToggleButton genMorphToggleButton;
    private javax.swing.JToggleButton genSigDistToggleButton;
    private javax.swing.JToggleButton genVisToggleButton;
    private javax.swing.JTextField greyThreshField;
    private javax.swing.JLabel greyThreshLabel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lambdaLabel;
    private javax.swing.JTextField lambdaTextField;
    private javax.swing.JTextField minCurveRangeField;
    private javax.swing.JLabel minCurveRangeLabel;
    private javax.swing.JTextField minCurveThreshField;
    private javax.swing.JLabel minCurveThreshLabel;
    private javax.swing.JLabel minMorphAreaLabel;
    private javax.swing.JTextField minMorphAreaTextField;
    private javax.swing.JLabel minTrajLabel;
    private javax.swing.JTextField minTrajTextField;
    private javax.swing.JTextField previewField;
    private javax.swing.JScrollBar previewScrollBar;
    private javax.swing.JToggleButton previewToggleButton;
    private javax.swing.JTextField protDurField;
    private javax.swing.JLabel protDurLabel;
    private javax.swing.JTextField protLenField;
    private javax.swing.JLabel protLenLabel;
    private javax.swing.JButton runButton;
    private java.awt.Canvas sigCanvas;
    private javax.swing.JLabel sigLabel;
    private javax.swing.JTextField sigRecThreshField;
    private javax.swing.JLabel sigRecThreshLabel;
    private javax.swing.JTextField sigThreshFactField;
    private javax.swing.JLabel sigThreshFactLabel;
    private javax.swing.JRadioButton simpSegRadioButton;
    private javax.swing.JPanel simpleTab;
    private javax.swing.JTextField spatFiltRadField;
    private javax.swing.JLabel spatFiltRadLabel;
    private javax.swing.JTextField spatResField;
    private javax.swing.JLabel spatResLabel;
    private javax.swing.JTextField tempFiltRadField;
    private javax.swing.JLabel tempFiltRadLabel;
    private javax.swing.JComboBox threshComboBox;
    private javax.swing.JLabel threshLabel;
    private javax.swing.JTextField timeResField;
    private javax.swing.JLabel timeResLabel;
    private javax.swing.JToggleButton useSigThreshToggleButton;
    private javax.swing.JLabel visLineWidthLabel;
    private javax.swing.JTextField visLineWidthTextField;
    // End of variables declaration//GEN-END:variables
}
